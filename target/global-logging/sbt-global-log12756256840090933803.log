[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\d0s0fqb\AppData\Local\Temp\idea2.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\d0s0fqb\AppData\Local\Temp\idea2.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Oracle Corporation Java 16.0.2)
[debug]       Load.loadUnit: plugins took 122.8951ms
[debug]       Load.loadUnit: defsScala took 0.3157ms
[debug] [Loading] Scanning directory C:\Users\d0s0fqb\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\d0s0fqb\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 20.966 ms
[debug]           Load.resolveProject(global-plugins) took 45.4289ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\d0s0fqb\.sbt\1.0\plugins, plugins: List(<none>))) took 91.8757ms
[debug] [Loading] Done in C:\Users\d0s0fqb\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 117.1578ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3173ms
[debug]     Load.loadUnit(file:/C:/Users/d0s0fqb/.sbt/1.0/plugins/, ...) took 250.7076ms
[debug]   Load.apply: load took 422.4322ms
[debug]   Load.apply: resolveProjects took 6.2976ms
[debug]   Load.apply: finalTransforms took 64.2988ms
[debug]   Load.apply: config.delegates took 9.1494ms
[debug]   Load.apply: Def.make(settings)... took 396.8589ms
[debug]   Load.apply: structureIndex took 102.8484ms
[debug]   Load.apply: mkStreams took 1.4654ms
[info] loading global plugins from C:\Users\d0s0fqb\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2490.1602ms
[debug]           Load.loadUnit: plugins took 49.4543ms
[debug]           Load.loadUnit: defsScala took 0.0041ms
[debug] [Loading] Scanning directory C:\Users\d0s0fqb\IdeaProjects\scalaProj\project
[debug]             Load.loadUnit: mkEval took 5.5217ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\d0s0fqb\IdeaProjects\scalaProj\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.963 ms
[info] loading settings for project scalaproj-build from idea2.sbt ...
[debug]               Load.resolveProject(scalaproj-build) took 7.506ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scalaproj-build, base: C:\Users\d0s0fqb\IdeaProjects\scalaProj\project, plugins: List(<none>))) took 10.0467ms
[debug] [Loading] Done in C:\Users\d0s0fqb\IdeaProjects\scalaProj\project, returning: (scalaproj-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 148.0144ms
[debug]           Load.loadUnit: cleanEvalClasses took 9.2464ms
[debug]         Load.loadUnit(file:/C:/Users/d0s0fqb/IdeaProjects/scalaProj/project/, ...) took 207.9437ms
[debug]       Load.apply: load took 210.1436ms
[debug]       Load.apply: resolveProjects took 0.1011ms
[debug]       Load.apply: finalTransforms took 12.0304ms
[debug]       Load.apply: config.delegates took 0.6267ms
[debug]       Load.apply: Def.make(settings)... took 78.0695ms
[debug]       Load.apply: structureIndex took 32.3307ms
[debug]       Load.apply: mkStreams took 0.0023ms
[info] loading project definition from C:\Users\d0s0fqb\IdeaProjects\scalaProj\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 620.2273ms
[debug]     Load.loadUnit: defsScala took 0.0035ms
[debug] [Loading] Scanning directory C:\Users\d0s0fqb\IdeaProjects\scalaProj
[debug]       Load.loadUnit: mkEval took 0.5652ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\d0s0fqb\IdeaProjects\scalaProj, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.1826 ms
[info] loading settings for project scalaproj from build.sbt ...
[debug]         Load.resolveProject(scalaproj) took 38.9881ms
[debug]       Load.loadTransitive: finalizeProject(Project(id scalaproj, base: C:\Users\d0s0fqb\IdeaProjects\scalaProj, plugins: List(<none>))) took 43.3739ms
[debug] [Loading] Done in C:\Users\d0s0fqb\IdeaProjects\scalaProj, returning: (scalaproj)
[debug]     Load.loadUnit: loadedProjectsRaw took 155.9585ms
[debug]     Load.loadUnit: cleanEvalClasses took 26.0024ms
[debug]   Load.loadUnit(file:/C:/Users/d0s0fqb/IdeaProjects/scalaProj/, ...) took 803.2845ms
[debug] Load.apply: load took 805.7448ms
[debug] Load.apply: resolveProjects took 0.1314ms
[debug] Load.apply: finalTransforms took 26.0555ms
[debug] Load.apply: config.delegates took 0.3586ms
[debug] Load.apply: Def.make(settings)... took 70.5094ms
[debug] Load.apply: structureIndex took 28.4693ms
[debug] Load.apply: mkStreams took 0.0021ms
[info] set current project to scalaProj (in build file:/C:/Users/d0s0fqb/IdeaProjects/scalaProj/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 62892 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 62892, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to scalaProj (in build file:/C:/Users/d0s0fqb/IdeaProjects/scalaProj/)
[debug] > Exec(idea-shell, None, None)
